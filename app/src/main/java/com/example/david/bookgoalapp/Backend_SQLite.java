package com.example.david.bookgoalapp;

import android.content.Context;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.graphics.Color;
import android.provider.CalendarContract;
import android.util.Log;
import android.util.Pair;
import static com.example.david.bookgoalapp.BookGoalMySQLiteDBDiffinition.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;


/**
 * Created by David on 24-Jun-17.
 */

public class Backend_SQLite extends SQLiteOpenHelper implements IBackend {
        //all functions on fail will return a R.string res id

    private final String ERR_TAG = "BackendSQLite error tag";
    private static Backend_SQLite mInstace = null;

    /**
     * Singleton function
     * @param con
     * @return
     */
    public static Backend_SQLite getInstance(Context con) {
        if(mInstace == null) {
            mInstace = new Backend_SQLite(con);
            return mInstace;
        }
        else return mInstace;
    }

    /**
     * Constructor. Do not use
     * @param con
     */
    private Backend_SQLite(Context con) {
        super(con, BookGoalMySQLiteDBDiffinition.DATABASE_NAME,
                null,BookGoalMySQLiteDBDiffinition.DATABASE_VERSION);

    }

    /**
     * OnCreate
     * @param db
     */
    @Override
    public void onCreate(SQLiteDatabase db) {
        //create BookGoal table
        db.execSQL(CREATE_TABLE_BOOKGOAL_CMD);
        //set starting autoincrecment number
    }

    /**
     * On upgrade
     * @param db
     * @param oldVersion
     * @param newVersion
     */
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion,int newVersion) {
        db.execSQL("drop table if exists " +
                TABLE_BOOKGOAL_NAME
                    );
        onCreate(db);
    }

    /**
     * Add a BookGoal instance to the data base. Don't supply id (while not be used).
     * Id for the new BookGoal will be generated internally.
     * @param bookGoal book data to add.
     * @return 0 on success, otherwise a R.string error message code.
     */
    @Override
    public int addBookGoal(BookGoal bookGoal) {

        SQLiteDatabase db = this.getWritableDatabase();
        String sqlStmt = "insert into " +
                TABLE_BOOKGOAL_NAME +
                "( " +
               // BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_ID         +","+ --Don't add ID! will be generated by the database
                BookGoalTableDiffinition.COLUMN_NAME       +","+
                BookGoalTableDiffinition.COLUMN_START_POS  +","+
                BookGoalTableDiffinition.COLUMN_END_POS    +","+
                BookGoalTableDiffinition.COLUMN_CUR_POS    +","+
                BookGoalTableDiffinition.COLUMN_POS_TYPE   +","+
                BookGoalTableDiffinition.COLUMN_RATE       +","+
                BookGoalTableDiffinition.COLUMN_START_DATE +","+
                BookGoalTableDiffinition.COLUMN_COLOR      +","+
                BookGoalTableDiffinition.COLUMN_AT_TIME    +","+
                BookGoalTableDiffinition.COLUMN_ENABLED    +","+
                BookGoalTableDiffinition.COLUMN_NOTE       +" "+
        ") values (?,?,?,?,?,?,?,?,?,?,?);";

        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindString(1,bookGoal.getName());
        stmt.bindLong(  2,bookGoal.getStart_pos());
        stmt.bindLong(  3,bookGoal.getEnd_pos());
        stmt.bindLong(  4,bookGoal.getCur_pos());
        stmt.bindString(5,bookGoal.getPos_type().toString());
        stmt.bindLong(  6,bookGoal.getRate());
        stmt.bindString(7,bookGoal.getShortStarting_date());
        stmt.bindLong(  8,bookGoal.getColor());
        stmt.bindString(9,bookGoal.getAt_time().toString());
        stmt.bindLong(  10,bookGoal.isEnabled() ? 1 : 0);
        stmt.bindString(11,bookGoal.getNote());
        if(stmt.executeInsert() == -1) { //error
            return R.string.couldn_t_add_bookgoal_to_database;
        }
        Log.d(ERR_TAG,"added bookgoal");
        return 0;
    }

    /**
     * Edit a BookGoal instance in the database. Will find what to edit by Id.
     * @param bookGoal Data to change. Id will not be changed.
     * @return 0 on success, otherwise a R.string error message code.
     */
    @Override
    public int editBookGoal(BookGoal bookGoal) {
        SQLiteDatabase db = this.getWritableDatabase();
        String sqlStmt = "update " + BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME +
                         " set "    +
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_NAME      +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_START_POS +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_END_POS   +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_CUR_POS   +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_POS_TYPE  +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_RATE      +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_START_DATE+"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_COLOR     +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_AT_TIME   +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_ENABLED   +"=?,"+
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_NOTE      +"=? "+
                         " where "  +
                                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_ID +
                         "=?"
                +
                         ";";

        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindString(1,bookGoal.getName());
        stmt.bindLong(  2,bookGoal.getStart_pos());
        stmt.bindLong(  3,bookGoal.getEnd_pos());
        stmt.bindLong(  4,bookGoal.getCur_pos());
        stmt.bindString(5,bookGoal.getPos_type().toString());
        stmt.bindLong(  6,bookGoal.getRate());
        stmt.bindString(7,bookGoal.getShortStarting_date());
        stmt.bindLong(  8,bookGoal.getColor());
        stmt.bindString(9,bookGoal.getAt_time().toString());
        stmt.bindLong(  10,bookGoal.isEnabled() ? 1 : 0);
        stmt.bindString(11,bookGoal.getNote());
        stmt.bindLong(  12,bookGoal.getId());
        if(stmt.executeUpdateDelete() == 0) {//no rows affected
            return R.string.couldn_t_update_bookgoal_in_database;
        }
        return 0;
    }

    @Override
    public int advanceBookGoalCur_posById(int bookGoalId) {
        SQLiteDatabase db = this.getWritableDatabase();

        //this is the idea:
        //update bookGoal_table
        //    set currentPosition = (
        //         select min(sum(currentPosition+rate),endingPosition) from bookGoal_table where id = 3 #we don't want cur_pos to be more than ending pos
        //                          )
        //             where id = 3

        String sqlStmt = "update " + TABLE_BOOKGOAL_NAME +
                " set "  + BookGoalTableDiffinition.COLUMN_CUR_POS +
                "= (select min(sum(" + BookGoalTableDiffinition.COLUMN_CUR_POS +
                " + "   + BookGoalTableDiffinition.COLUMN_RATE +
                "),  "  + BookGoalTableDiffinition.COLUMN_END_POS +
                ")from "+ TABLE_BOOKGOAL_NAME +
                " where "+BookGoalTableDiffinition.COLUMN_ID +
                " = ? ) where " + BookGoalTableDiffinition.COLUMN_ID +
                " = ?";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,bookGoalId);
        stmt.bindLong(2,bookGoalId);
        if(stmt.executeUpdateDelete() == 0) //no rows affected

            return R.string.couldnt_update_cur_pos;
        return 0;
    }

    @Override
    public int advanceBookGoalToCur_posById(int pos, int bookGoalId) {
        SQLiteDatabase db = this.getWritableDatabase();
        //this is the idea:
        //update bookGoal_table set currentPosition = (min(pos,endingPosition)) where id = 3
        String sqlStmt = "update " + TABLE_BOOKGOAL_NAME +
                         " set "    + BookGoalTableDiffinition.COLUMN_CUR_POS +
                         " = (min(?, "+ BookGoalTableDiffinition.COLUMN_END_POS +
                         ")) where "+ BookGoalTableDiffinition.COLUMN_ID      +
                         " = ?";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,pos);
        stmt.bindLong(2,bookGoalId);
        if(stmt.executeUpdateDelete() == 0) //no rows affected
            return R.string.couldnt_update_cur_pos;
        return 0;

    }

    @Override
    public int undoAdvanceBookGoalCur_posById(int bookGoalId) {
        SQLiteDatabase db = this.getWritableDatabase();

        //this is the idea:
        //update bookGoal_table
        //    set currentPosition = (
        //         select max(sum(currentPosition+rate),statingPosition) from bookGoal_table where id = 3 #we don't want cur_pos to be less than start pos
        //                          )
        //             where id = 3

        String sqlStmt = "update " + TABLE_BOOKGOAL_NAME +
                " set "  + BookGoalTableDiffinition.COLUMN_CUR_POS +
                "= (select max(sum(" + BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_CUR_POS +
                " - "   + BookGoalTableDiffinition.COLUMN_RATE +
                "),  "  + BookGoalTableDiffinition.COLUMN_START_POS +
                ")from "+ TABLE_BOOKGOAL_NAME +
                " where "+BookGoalTableDiffinition.COLUMN_ID +
                " = ? ) where " + BookGoalTableDiffinition.COLUMN_ID +
                " = ?";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,bookGoalId);
        stmt.bindLong(2,bookGoalId);
        if(stmt.executeUpdateDelete() == 0) //no rows affected
            return R.string.couldnt_update_cur_pos;
        return 0;
    }

    @Override
    public int undoAdvanceBookGoalToCur_posById(int pos, int bookGoalId) {
        SQLiteDatabase db = this.getWritableDatabase();
        //this is the idea:
        //update bookGoal_table set currentPosition = (max(pos-rate,startPos)) where id = 3
        String sqlStmt = "update " + TABLE_BOOKGOAL_NAME +
                " set "    + BookGoalTableDiffinition.COLUMN_CUR_POS +
                " = (max(? -"+ BookGoalTableDiffinition.COLUMN_RATE    +
                ", "+ BookGoalTableDiffinition.COLUMN_START_POS     +
                ")) where "+ BookGoalTableDiffinition.COLUMN_ID      +
                " = ?";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,pos);
        stmt.bindLong(2,bookGoalId);
        if(stmt.executeUpdateDelete() == 0) //no rows affected
            return R.string.couldnt_update_cur_pos;
        return 0;
    }

    @Override
    public int fastSetEnabledById(int id, boolean enabled) {
        SQLiteDatabase db = this.getWritableDatabase();
        String sqlStmt = "update " + TABLE_BOOKGOAL_NAME +
                            " set " + BookGoalTableDiffinition.COLUMN_ENABLED +
                            " =  " + (enabled ? 1:0) +
                            " where " + BookGoalTableDiffinition.COLUMN_ID +
                            " = ?";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,id);
        if(stmt.executeUpdateDelete() == 0) //no rows affected
            return R.string.couldn_t_update_bookgoal_in_database;
        return 0;
    }

    /**
     * Delete BookGoal instance from database. Will find what to delete by id.
     * @param bookGoalId id of BookGoal to delete.
     * @return 0 on success, otherwise a R.string error message code.
     */
    @Override
    public int deleteBookGoal(int bookGoalId) {

        SQLiteDatabase db = this.getWritableDatabase();
        String sqlStmt = "delete from " + BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME +
                         " where " + BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_ID +
                         "=?;";
        SQLiteStatement stmt = db.compileStatement(sqlStmt);
        stmt.bindLong(1,bookGoalId);
        if(stmt.executeUpdateDelete() == 0) {//no rows affected
            return R.string.couldn_t_delete_row_from_database;
        }
        return 0;
    }

    /**
     * Get a BookGoal instance from a Cursor.
     * @param c Cursor whith data.
     * @return BookGoal instance, or null if Cursor is empty.
     * @throws Exception if any errors accord. Whill return R.string int code of any of this api specific errors.
     */
    private BookGoal getBookGoalFromCursor(Cursor c) throws Exception {
        if(! c.isAfterLast()) {
            BookGoal b = new BookGoal();
            b.setId(c.getInt(             c.getColumnIndex(BookGoalTableDiffinition.COLUMN_ID)));
            b.setName(c.getString(        c.getColumnIndex(BookGoalTableDiffinition.COLUMN_NAME)));
            b.setStart_pos(c.getInt(      c.getColumnIndex(BookGoalTableDiffinition.COLUMN_START_POS)));
            b.setEnd_pos(c.getInt(        c.getColumnIndex(BookGoalTableDiffinition.COLUMN_END_POS)));
            b.setCur_pos(c.getInt(        c.getColumnIndex(BookGoalTableDiffinition.COLUMN_CUR_POS)));
            b.setPos_type(c.getString(    c.getColumnIndex(BookGoalTableDiffinition.COLUMN_POS_TYPE)));
            b.setRate(c.getInt(           c.getColumnIndex(BookGoalTableDiffinition.COLUMN_RATE)));
            b.setStating_date(c.getString(c.getColumnIndex(BookGoalTableDiffinition.COLUMN_START_DATE)));
            b.setColor(c.getInt(          c.getColumnIndex(BookGoalTableDiffinition.COLUMN_COLOR)));
            try {
                b.setAt_time(new Time(c.getString(c.getColumnIndex(BookGoalTableDiffinition.COLUMN_AT_TIME))));
            } catch (Exception e) {
                throw new Exception(String.valueOf(R.string.couldn_t_parse_time_got_from_data_base));
            }
            b.setEnabled(c.getInt(c.getColumnIndex(BookGoalTableDiffinition.COLUMN_ENABLED)) == 1);
            b.setNote(c.getString(c.getColumnIndex(BookGoalTableDiffinition.COLUMN_NOTE)));
            return b;
        }
        return null;
    }

    /**
     * Get a BookGoal instance by its id.
     * @param bookGoalId Id of BookGoal to find.
     * @return <0,bookGoal> if found, <R.string error code,null> otherwise.
     */
    @Override
    public Pair<Integer, BookGoal> getBookGoalById(int bookGoalId) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c = db.query( BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME,//table name
                            null,//selected columns null = *
                            BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_ID + "= ?", //where id =
                new String[] {String.valueOf(bookGoalId)}, // = id
                null,null,null); //group by, having, order by

        BookGoal b;
        c.moveToFirst();
        try {
            b = getBookGoalFromCursor(c);
        } catch (Exception e) {
            int code = Integer.valueOf(e.getMessage());//if conversion doesn't work it must be
            //anouther exception we don't know about, throw it again111
            return new Pair<>(code,null); //if it work, then its probably one of our exeptions
        }
        if(b != null)
            return new Pair<>(0,b);
        else
            return new Pair<>(R.string.couldn_t_find_bookgoal_in_database, null);
    }

    /**
     * Get a BookGoal by its name.
     * @param name Name of BookGoal to find.
     * @return <0,bookGoal> if found, <R.string error code,null> otherwise.
     */
    @Override
    public Pair<Integer, BookGoal> getBookGoalByName(String name) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c = db.query( BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME,//table name
                null,//selected columns null = *
                BookGoalMySQLiteDBDiffinition.BookGoalTableDiffinition.COLUMN_NAME + "= ?", //where name =
                new String[] {name},// =  name
                null,null,null); //group by, having, order by

        BookGoal b;
        c.moveToFirst();
        try {
            b = getBookGoalFromCursor(c);
        } catch (Exception e) {
            int code = Integer.valueOf(e.getMessage());//if conversion doesn't work it must be
            //anouther exception we don't know about, throw it again111
            return new Pair<>(code,null); //if it work, then its probably one of our exeptions
        }
        Log.d(ERR_TAG,"found bookgoal");
        if(b != null)
            return new Pair<>(0,b);
        else
            return new Pair<>(R.string.couldn_t_find_bookgoal_in_database, null);
    }

    /**
     * Get a list of all BookGoals in database.
     * @return <0,list> if successful, <R.string error code,null> otherwise.
     */
    @Override
    public Pair<Integer, ArrayList<BookGoal>> getAllBookGoals() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c= db.query(BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME,
                        null,null,null,null,null,null); //get everything
        BookGoal b;
        ArrayList<BookGoal> goals = new ArrayList<>();
        c.moveToFirst();

        for(c.moveToFirst();!c.isAfterLast();c.moveToNext()) {
            try {
                b = getBookGoalFromCursor(c);
            } catch (Exception e) {
                int code = Integer.valueOf(e.getMessage());//if conversion doesn't work it must be
                //anouther exception we don't know about, throw it again111
                return new Pair<>(code,null); //if it work, then its probably one of our exeptions
            }
            goals.add(b);
        }

        return new Pair<>(0,goals);
    }

    @Override
    public Pair<Integer, ArrayList<BookGoal>> getAllEnabledBookGoals() {

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c= db.query(BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME,
                null," enabled=1 ",null,null,null,null); //get everything
        BookGoal b;
        ArrayList<BookGoal> goals = new ArrayList<>();
        c.moveToFirst();

        for(c.moveToFirst();!c.isAfterLast();c.moveToNext()) {
            try {
                b = getBookGoalFromCursor(c);
            } catch (Exception e) {
                int code = Integer.valueOf(e.getMessage());//if conversion doesn't work it must be
                //anouther exception we don't know about, throw it again111
                return new Pair<>(code,null); //if it work, then its probably one of our exeptions
            }
            goals.add(b);
        }

        return new Pair<>(0,goals);
    }

    @Override
    public Pair<Integer, ArrayList<BookGoal>> getAllDisabledBookGoals() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor c= db.query(BookGoalMySQLiteDBDiffinition.TABLE_BOOKGOAL_NAME,
                null," enabled=0 ",null,null,null,null); //get everything
        BookGoal b;
        ArrayList<BookGoal> goals = new ArrayList<>();
        c.moveToFirst();

        for(c.moveToFirst();!c.isAfterLast();c.moveToNext()) {
            try {
                b = getBookGoalFromCursor(c);
            } catch (Exception e) {
                int code = Integer.valueOf(e.getMessage());//if conversion doesn't work it must be
                //another exception we don't know about, throw it again111
                return new Pair<>(code,null); //if it work, then its probably one of our exeptions
            }
            goals.add(b);
        }

        return new Pair<>(0,goals);
    }
}
